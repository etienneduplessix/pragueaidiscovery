{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "path": "22bed45d-382a-420a-babf-334e9076edec",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        20,
        -80
      ],
      "id": "801d87ff-2ec5-4db0-8fc6-09cc35c4682c",
      "name": "Webhook",
      "webhookId": "22bed45d-382a-420a-babf-334e9076edec"
    },
    {
      "parameters": {
        "resource": "bucket",
        "operation": "search",
        "bucketName": "uploads",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        200,
        -80
      ],
      "id": "7653d32c-9980-4dbe-88ea-e7473ffadb47",
      "name": "S3",
      "credentials": {
        "s3": {
          "id": "W34YCmTzdYHc0qkS",
          "name": "S3 account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "Key",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        420,
        -80
      ],
      "id": "ac65a74a-7803-4458-bdd5-08c853c868e5",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6fcd928a-3e08-46f7-b6fa-d63efd6333e4",
              "leftValue": "={{ $json.Key }}",
              "rightValue": "=.csv",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        640,
        -80
      ],
      "id": "df3c0893-fcea-4e0f-955e-ec884b4acdb2",
      "name": "If"
    },
    {
      "parameters": {
        "bucketName": "uploads",
        "fileKey": "={{ $json.Key }}"
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        900,
        -200
      ],
      "id": "b74e99dc-c7d0-46e4-90bf-9ae36a1f0655",
      "name": "S31",
      "credentials": {
        "s3": {
          "id": "W34YCmTzdYHc0qkS",
          "name": "S3 account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "headerRow": false,
          "fromLine": 1
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1320,
        -320
      ],
      "id": "732e564d-6ac7-4034-a69d-59c395007f08",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://web:8000/ocr1",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filename",
              "value": "={{ $json.Key }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1140,
        100
      ],
      "id": "69762d2b-201d-43f7-b076-4544c9178cc9",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "extracted_text",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1560,
        120
      ],
      "id": "f6c2cb57-336d-4fbc-bbfe-2bacdf1eb172",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "const table = 'ocr_text_file';\n\n// If the field already exists, no table creation needed\nif ($json.extracted_text) {\n  return [{ json: { message: 'OCR text already present â€” skipping table creation.', table } }];\n}\n\n// Build SQL table definition\nconst createQuery = `\nCREATE TABLE IF NOT EXISTS public.${table} (\n  id SERIAL PRIMARY KEY,\n  line TEXT\n);\n`;\n\nreturn [{\n  json: {\n    table,\n    createQuery: createQuery.trim(),\n    message: 'Table created because OCR text was missing.'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        120
      ],
      "id": "0ce25f27-ed44-4d30-8bd0-fd008de916d3",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.createQuery }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2080,
        120
      ],
      "id": "60012b3b-e27c-4507-9043-948ffadcf8b7",
      "name": "Postgres4",
      "credentials": {
        "postgres": {
          "id": "MQgLQZyoEx8Cg1Yt",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const text = $('HTTP Request').first().json.extracted_text ?? '';\n\n// Split into lines\nconst lines = text.split(/\\r?\\n/).filter(l => l.trim() !== '');\n\nreturn lines.map((line, index) => {\n  // Fallback to whitespace splitting\n  const parts = line.trim().split(/\\s+/).filter(Boolean);\n\n  const row = { id: index + 1 };\n\n  parts.forEach((value, i) => {\n    // Clean: remove non-alphanumerics except dash, dot, slash\n    let cleaned = value.replace(/[^\\w\\d\\-./]/g, '');\n\n    // Skip empty or garbage values\n    if (!cleaned || cleaned === 'undefined') return;\n\n    // Optionally skip short fragments (like just 1-2 letters)\n    if (cleaned.length < 3) return;\n\n    row[`col${i + 1}`] = cleaned;\n  });\n\n  return { json: row };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        120
      ],
      "id": "87b2dd7e-e460-4e90-976c-ae77dd1355a8",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2620,
        120
      ],
      "id": "3444c4dc-f613-450b-b2df-99b99c8f6bd4",
      "name": "Code4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.createTableQuery }}\n{{ $json.insertQuery }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2040,
        -360
      ],
      "id": "380d0fa3-963d-443f-b9aa-bae8213d0887",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "MQgLQZyoEx8Cg1Yt",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the key and create a table name from it\nconst key = $('S31').first().json.Key || 'default_table';\nconst table = key.replace(/\\.csv$/, '').toLowerCase().replace(/[^a-z0-9_]/gi, \"_\");\n\n// Get the header row object: { 0: \"Customer ID\", 1: \"Customer Name\", ... }\nconst rawRow = $input.first().json.row;\nif (!rawRow) {\n  throw new Error(\"No row header found\");\n}\n\n// Extract column names and ensure they're valid SQL identifiers\nconst columns = Object.values(rawRow);\nconst safeColumns = columns.map(col => {\n  // Create a SQL-safe column name\n  const safeName = col.toLowerCase()\n    .replace(/[^a-z0-9_]/gi, \"_\")\n    .replace(/^_+|_+$/g, \"\");\n  \n  // Ensure column name isn't empty or just numbers (prepend \"col_\" if needed)\n  return safeName.match(/^[0-9]*$/) ? `col_${safeName}` : (safeName || \"unnamed_column\");\n});\n\n// Build column definitions for CREATE TABLE\nconst columnDefs = safeColumns.map(col => `\"${col}\" TEXT`);\n\n// Create the CREATE TABLE query\nconst createTableQuery = `CREATE TABLE IF NOT EXISTS public.\"${table}\" (\n  id SERIAL PRIMARY KEY,\n  ${columnDefs.join(\",\\n  \")}\n);`;\n\n// Get all input items (assuming these are the data rows)\nconst items = $input.all();\nconst dataRows = items.map(item => item.json.row);\n\n// Prepare INSERT query for the data\n// First, build the values for all rows\nconst insertValues = [];\ndataRows.forEach(row => {\n  if (!row) return; // Skip empty rows\n  \n  // Get values corresponding to each column\n  const rowValues = [];\n  for (let i = 0; i < columns.length; i++) {\n    const columnIndex = i.toString();\n    // Escape single quotes in string values and handle nulls\n    const value = row[columnIndex] !== undefined && row[columnIndex] !== null \n      ? `'${String(row[columnIndex]).replace(/'/g, \"''\")}'` \n      : 'NULL';\n    rowValues.push(value);\n  }\n  \n  // Add the row values to the batch\n  if (rowValues.length > 0) {\n    insertValues.push(`(${rowValues.join(', ')})`);\n  }\n});\n\n// Create the INSERT query if we have values\nlet insertQuery = '';\nif (insertValues.length > 0) {\n  insertQuery = `INSERT INTO public.\"${table}\" (${safeColumns.map(col => `\"${col}\"`).join(', ')})\nVALUES\n${insertValues.join(',\\n')};`;\n}\n\n// Return both queries\nreturn [{\n  json: {\n    createTableQuery,\n    insertQuery,\n    table\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        -380
      ],
      "id": "06abd8ce-6c78-46b1-9a1d-83721e2add66",
      "name": "Code2"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "S31",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S31": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Postgres4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres4": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        []
      ]
    },
    "Postgres3": {
      "main": [
        []
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "3f4f380f-69cb-4885-8e97-3c5848be6a90",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "da123f599742008af26aec44269d81a2c8f69289e121a1b36b6f022d749ebd67"
  },
  "id": "3wKEH6VC90v3we9k",
  "tags": []
}